#!/usr/bin/env ruby
require 'optparse'
require 'fileutils'
require 'securerandom'
require 'shellwords'
require 'json'

URL = "https://filecrypt.dupuis.io"
TOKEN = ENV["FILECRYPT_TOKEN"]

options = {
  path: "#{ENV['HOME']}/Pictures/screenshots",
	mode: :screenshot,
  local: false,
}

OptionParser.new do |opts|
  opts.on("-v", "--video", "record video") do |w|
    options[:mode] = :video
    options[:path] =  "#{ENV['HOME']}/Videos/screencast/"
  end
  opts.on("-l", "--local", "skip uploading") do |w|
    options[:local] = true
  end
end.parse!

def screencast filename
  slop = %x(slop -f slop -f '%x %y %w %h %g %i' -c 1,0,0,0 -b 10).split
  x = slop[0]
  y = slop[1]
  w = slop[2].to_i/2*2
  h = slop[3].to_i/2*2
  screencastcall = []
  screencastcall << 'ffmpeg'
  screencastcall << '-f x11grab'
  screencastcall << %(-s "#{w}"x"#{h}" -i ":0.0+#{x},#{y}")
  screencastcall << '-pix_fmt yuv420p'
  screencastcall << filename
  puts "#{screencastcall.join ' '}"
  %x(#{screencastcall.join ' '})
end

def screenshot filename
  screenshot_call = []
  screenshot_call << 'maim'
  screenshot_call << '--nodecorations=2'
  screenshot_call << '--hidecursor'
  screenshot_call << '--noopengl'
  screenshot_call << '-b 10 -c 0.5,0.5,0.8,0.5'
  screenshot_call << '-s'
  screenshot_call << filename
  %x(#{screenshot_call.join ' '})
end

def copy_path url
  IO.popen(["xclip", "-sel", "clip"], "w") {|f| f << url }
end

def upload path
  output = %x{curl --request "POST"  \
                   --url "#{URL}/api/v1/uploads.json" \
                   --header "Authorization: Bearer #{TOKEN}" \
                   --header "Content-Type: multipart/form-data" \
                   --form "upload[file]=@#{path}"}
  JSON.parse(output)["url"]
end

def notify
  system("notify-send", "Screenshot uploaded", "-t", "3000")
end

extension = 'png'
extension = 'mp4' if options[:mode] == :video
filename = "#{Time.now.strftime('%Y%m%d%H%M%S')}_#{SecureRandom.hex(5)}.#{extension}"
path = File.join(options[:path], Time.now.strftime('%Y/%m'), filename)
FileUtils.mkdir_p(File.dirname(path))

if options[:mode] == :video then
  screencast path
else
  screenshot path
end
unless options[:local]
  url = upload(path)
  copy_path(url)
end
notify
